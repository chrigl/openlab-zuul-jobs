- hosts: k8s-master
  become: yes
  roles:
#    - role: create-multinodes-k8s-cluster-with-kubeadm
#      k8s_role_to_deploy:
#        - master
  tasks:
    - name: get kubeadm join command
      shell: kubeadm token create --print-join-command
      register: kubeadm_join_cmd
    - name: install snap yq and jq
      snap:
        name:
          - yq
          - jq
    - name: ship feature-gates for kubelet
      copy:
        dest: /root/kubelet-feature-gates.yaml
        content: |
          featureGates:
            CSIMigration: true
            CSIMigrationOpenStack: true
    - name: enable feature-gates in kubelet and kube-controller-manager
      args:
        executable: /bin/bash
      shell:
        cmd: |
          set -o pipefail
          set -ex
          kubelet_version=$(kubectl version -ojson | jq -r '.serverVersion | "\(.major).\(.minor)"')
          pushd .
          cd /root

          cp /var/lib/kubelet/config.yaml ./config.yaml
          yq m -i config.yaml kubelet-feature-gates.yaml
          cp config.yaml /var/lib/kubelet/config.yaml
          systemctl restart kubelet

          kubectl -n kube-system get cm kubelet-config-${kubelet_version} -ojsonpath='{.data.kubelet}' | yq m - kubelet-feature-gates.yaml > /root/patched-kubelet
          exit 0

          kubectl -n kube-system create configmap kubelet-config-${kubelet_version} --from-file=kubelet=patched-kubelet --dry-run -oyaml | kubectl apply -f -
          cp /etc/kubernetes/manifests/kube-controller-manager.yaml /root/
          yq w -i kube-controller-manager.yaml spec.containers[0].command[+] -- --feature-gates=CSIMigration=true,CSIMigrationOpenStack=true
          cp kube-controller-manager.yaml /etc/kubernetes/manifests/kube-controller-manager.yaml
          popd
          echo "waiting for kube-controller-manager to come back"
          attempt=0
          while ! pgrep -f CSIMigration=true; do
            if ((attempt++ >= 30)); then
              >&2 echo "kube-controller-manager does not come up with CSIMigration feature-gates"
              exit 1
            fi
            sleep 1
          done

- hosts: k8s-nodes
  become: yes
  roles:
    - role: create-multinodes-k8s-cluster-with-kubeadm
      k8s_role_to_deploy:
        - node
      kubeadm_join_cmd: "{{ hostvars['k8s-master']['kubeadm_join_cmd']['stdout'] }}"

#- hosts: k8s-master
#  become: yes
#  tasks:
#    - name: config CPO
#      shell:
#        cmd: |
#          set -o pipefail
#          set -ex
#
#          mkdir -p /etc/kubernetes/
#          cat << EOF >> /etc/kubernetes/cloud-config
#          [Global]
#          domain-name = $OS_USER_DOMAIN_NAME
#          tenant-id = $OS_PROJECT_ID
#          auth-url = $OS_AUTH_URL
#          password = $OS_PASSWORD
#          username = $OS_USERNAME
#          region = $OS_REGION_NAME
#          [BlockStorage]
#          bs-version = v3
#          ignore-volume-az = yes
#          EOF
#
#          echo FOOOOO
#          exit 0
#
#          export CLOUD_CONFIG=/etc/kubernetes/cloud-config
#
#          # Replace custom cloud config
#          {
#              cloud_cfg=$(base64 -w 0 ${CLOUD_CONFIG})
#              sed "s/cloud\.conf:.*$/cloud.conf: $cloud_cfg/g" -i manifests/cinder-csi-plugin/csi-secret-cinderplugin.yaml
#          } > /dev/null 2>&1
#
#          # Enable services
#          kubectl create -f manifests/cinder-csi-plugin
#          sleep 5
#          # If services up
#          if timeout 300 bash -c '
#              while :
#              do
#                 kubectl get pod | sed "1d" | awk '\''$2 != "2/2" || $3 != "Running" {err = 1} END {exit err}'\'' && break
#                  sleep 1
#              done
#              '
#          then
#             echo 'Run services successful'
#              kubectl get pod
#          else
#              echo 'Run services failed'
#              kubectl get pod
#              exit 1
#          fi
#
#          # TODO: need to check if storage class need to be created
#          # runt tests
#      args:
#        executable: /bin/bash
#
#    - name: Run test
#      shell:
#        cmd: |
#          set -o pipefail
#          set -ex
#          # Set admin kubeconfig for running e2e tests
#          export KUBECONFIG=/etc/kubernetes/admin.conf
#
#          # Build kubetest
#          # go get kubetest is failing from k8s or cpo directory
#          cd ..
#          export GO111MODULE=on
#          export GOPROXY=https://proxy.golang.org
#          export GOSUMDB=sum.golang.org
#          go get k8s.io/test-infra/kubetest
#          kubetest --test --test_args="--ginkgo.focus=\[sig-storage\]\sIn-tree\sVolumes\s\[Driver:\s{kubernetes.io/cinder}\]\s\[Testpattern:\sDynamic\sPV|allowedTopologies|Pod\sDisks|PersistentVolumes\sDefault --ginkgo.skip=\\[Disruptive\\]|\\[Serial\\]|\\[Feature:.+\\]" --provider=local --storage.migratedPlugins=kubernetes.io/cinder"
#
#      args:
#        executable: /bin/bash
